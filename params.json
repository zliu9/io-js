{"name":"Io-js","tagline":"Javascript IO library","body":"# IOT IO Library\r\n\r\nA unified IO Javascript library for IOT device(Galileo/Edison), companion device(phone/tablet) and XDK.\r\n\r\n## Features\r\n\r\n* Arduino like API\r\n* Unified API for nodejs and browser\r\n* Standard JSON-RPC 2.0 support\r\n* Offload execution\r\n* Autogen tools for customized IO functions\r\n\r\n## PreInstall\r\n* This library can run correctly both on Intel dev kit https://software.intel.com/en-us/iotdevkit which contains host a machine running DevKit Live USB image and target Intel Galileo platform. This IO library can run on both of them. Below is a quick guide of how to enable nodejs on host and target. \r\n\r\n### Install yocoto on galileo\r\n\r\n* [Download SD card image (200M)](http://iotdk.intel.com/images/iot-devkit-201402201605-mmcblkp0.direct.bz2)\r\n\r\n* Uncompress image & recover image to micro sd card with `dd` cmd\r\n```bash\r\ndd if=/path/to/image  of=/sd/dev/path bs=1M\r\n```\r\n* insert SD card to galileo, then power on galileo \r\n\r\n* ssh login\r\n```bash\r\nssh root@ip_address_for_galileo\r\n```\r\n\r\n* check node/node-gyp/npm\r\n  - If not in $PATH, please find it under root directory, then create  symbol link for it. for example,\r\n```bash\r\nln -s /usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js /usr/bin/node-gyp\r\n```\r\n\r\n* Make sure Galileo system is set correctly.\r\n\r\n* copy io-js to galileo, then you can jump to `Installation` section. But the installation is very slow on Galileo. You may want to compile the library on host machine with cross compiler\r\n\r\n### Install devkit live image on host machine\r\n\r\n* Download iot dev kit image (4.2G)\r\n  - [devkit-live-img-final.binblob.bz2](https://software.intel.com/sites/landingpage/iotdk/devkit-live-img-final.binblob.bz2)\r\n\r\n* Although devkit officially suggest to use it as bootable USB key, but we suggest you to boot it in virtual machine.\r\n\r\n* Download & Install Virtual box\r\n  - [Refer to virtual box official website](https://www.virtualbox.org/wiki/Downloads)\r\n* uncompress image & convert image to virtual box image\r\n```bash\r\nvboxmanage convertfromraw --format VMDK devkit-live-img-final.binblob ~/devkit.vmdk\r\n```\r\n* Boot up devkit.vmdk in virtual box\r\n\r\n* login virtual machine\r\n\r\n* check node/node-gyp/npm\r\n  - If not under $PATH, please find it under root directory, then create  symbol link for it. for example,\r\n```bash\r\n  ln -s /opt/iot-devkit/1.5.1/yocto/sysroots/i586-poky-linux/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js /usr/bin/node-gyp\r\n```\r\n* copy io-js to devkit, then run it followed `Installation` part. \r\n\r\n## Installation\r\n\r\n  npm install\r\n  (if run `io-js` as root, please use \"npm install -unsafe-perm\" instead)\r\n  \r\n## Examples\r\n\r\n* Native IO operation on IOT device\r\n\r\n```javascript\r\nvar IOLIB = (typeof require === 'function') ? require('../'): this.IOLIB;\r\n\r\nvar io = new IOLIB.IO({\r\n  log: true\r\n});\r\n\r\nvar led = new IOLIB.Led({\r\n  io: io,\r\n  pin: 13\r\n});\r\n\r\nled.blink();\r\n\r\n```\r\n\r\n* RPC client which submits the IO request to IOT device. \r\n\r\nOnly needs to add RPC options to IO constructor. The code works in nodejs or browser. \r\n\r\n```javascript\r\nvar io = new IOLIB.IO({\r\n  log: true,\r\n  rpc: true,\r\n  port: 2000,\r\n  hostname: 'localhost',\r\n});\r\n\r\n```\r\n\r\n* Offload execution\r\n\r\nThe client can offload functions to remote server.\r\n\r\n```javascript\r\nvar IOLIB = (typeof require === 'function') ? require('..'): this.IOLIB;\r\n\r\nvar io = new IOLIB.IO({\r\n  log: true,\r\n  rpc: true,\r\n  port: 2000,\r\n  hostname: 'localhost',\r\n});\r\n\r\nio.offload(function(IOLIB, context) {\r\n  var io = new IOLIB.IO({\r\n    emu: true,\r\n    log: true\r\n  });\r\n  var led = new IOLIB.Led({\r\n    io: io,\r\n    pin: 13\r\n  });\r\n\r\n  led.off();\r\n\r\n  context.save = 1;\r\n  return true;\r\n});\r\n\r\nio.offloadQuery(function(error, response) {\r\n  console.log(JSON.stringify(response));\r\n});\r\n```\r\n\r\n## Test\r\n\r\nWe choose Buster.js to run tests in Nodejs and browser\r\n\r\nInstall buster.js\r\n\r\n```bash\r\nnpm install -g buster\r\n```\r\n\r\nRun test\r\n```bash\r\nmake test\r\n```\r\n\r\n## Arduino Library\r\n\r\nGo to target/device/libio\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}